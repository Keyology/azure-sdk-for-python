parameters:
  versionSpec: ''

steps:
  # use python 3.8 for tooling. packaging. platform.
  - task: UsePythonVersion@0
    displayName: "Use Python 3.8"
    inputs:
      versionSpec: 3.8

  - pwsh: |
      pip install packaging
    displayName: Prep Environment

  # select the appropriate version from manifest if present
  - task: PythonScript@0
    displayName: 'Install ${{ parameters.versionSpec }} from Python Manifest If Necessary'
    inputs:
      scriptPath: 'scripts/devops_tasks/install_python_version.py'
      arguments: '${{ parameters.versionSpec }} --installer_folder="../_pyinstaller'

  - pwsh: |
      $incoming = "${{ parameters.versionSpec }}"

      if($incoming.Contains("pypy3")){
        Write-Host "##vso[task.setvariable variable=ManualInstallNecessary]true"
      } 
    displayName: Check UsePythonVersion Necessity

  # UsePythonVersionTask is conditional based upon issue microsoft/azure-pipelines-tasks#15232.
  # Read submitted PR microsoft/azure-pipelines-tasks##15553 for further context as to the reasoning here.
  - task: PythonScript@0
    displayName: 'PyPy3 Specific Path Prepend'
    condition: and(succeeded(), eq(variables.ManualInstallNecessary, 'true'))
    inputs:
      scriptPath: 'scripts/devops_tasks/use_pypy_version.py'
      arguments: '${{ parameters.versionSpec }}'

  - script: |
      sudo chmod -R +777 /opt/hostedtoolcache/PyPy/3.8.12/
    displayName: Ensure PyPy pip is registered appropriately
    condition: and(succeeded(), eq(variables.ManualInstallNecessary, 'true'))


  - pwsh: |
      python -c "import sys; print(sys.executable)"
      python -m ensurepip --default-pip
    displayName: Ensure PyPy pip is registered appropriately
    condition: and(succeeded(), eq(variables.ManualInstallNecessary, 'true'))

  - script: |
      which pip
      echo $PATH
      echo $PYTHON_PATH
      echo $PYTHONPATH
    displayName: Interrogate env settings
    condition: and(succeeded(), eq(variables.ManualInstallNecessary, 'true'))

  - task: UsePythonVersion@0
    displayName: "Use Python $(PythonVersion)"
    condition: and(succeeded(), not(eq(variables.ManualInstallNecessary, 'true')))
    inputs:
      versionSpec: ${{ parameters.versionSpec }}
